# -*- coding: utf-8 -*-
"""
Created on Thu Apr 22 14:50:05 2021

@author: James
"""
# -*- coding: utf-8 -*-
"""
Created on Thu Apr 15 13:02:08 2021

@author: James

https://www.techwithtim.net/tutorials/pyqt5-tutorial/images/ - how to flick between images
https://www.youtube.com/watch?v=NrijKenny3Y
https://www.youtube.com/watch?v=oO5vX353N1A -> gguy with useful things about pyqt (line edit)

"""
from PyQt5 import QtGui, QtCore, QtWidgets
import cv2
import sys
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
import random
import numpy as np
from prettytable import PrettyTable
import time
import os

# ---------------------------------Start of Program ----------------------------------------------------------------------
'''
Seamlessly cloning detector allows user to input an image and the image is checked against
-previously calculated thresholds

self a keyword to reperesent an instance self allows access to the attributes of the class anywhere in it

'''
class FirstWindow(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        
        self.setWindowTitle('Instructions')
        self.setGeometry(400, 250, 1000, 500) # sets the size of the window (where its starts then size)
        
        self.seamlesslyCloningDetector = SeamlesslyCloningDetector()
        mainLayout2 = QVBoxLayout()
        
        self.Instruction1 = QtWidgets.QLabel(self) # sets where the label will be
        self.Instruction1.setFont(QFont('Arial', 15))
        self.Instruction1.move(400,0)# shows where its going to go
        self.Instruction1.setText("Please choose a file path")
        #self.Instruction1.setAlignment(Qt.AlignCenter)
        self.Instruction1.setStyleSheet("background-color: #508CA4; color: white; font-weight: bold ")
        self.Instruction1.adjustSize()
        
        self.Instruction2 = QtWidgets.QLabel(self) # sets where the label will be
        self.Instruction2.setFont(QFont('Arial', 15))
        self.Instruction2.move(400,0)# shows where its going to go
        #self.Instruction1.setAlignment(Qt.AlignCenter)
        self.Instruction2.setStyleSheet("background-color: #508CA4; color: white; font-weight: bold ")
        self.Instruction2.adjustSize()
        
        self.closeButton = QtWidgets.QPushButton(self)
        self.closeButton.setText("CLOSE WINDOW")
        self.closeButton.setStyleSheet("background-color: #508CA4; color: white; font-weight: bold  ")
        self.closeButton.setFont(QFont('Arial', 18))
        self.closeButton.clicked.connect(self.close) # calls the clicked function when button is clicked
        self.closeButton.setGeometry(650,400,450,100)
        self.closeButton.adjustSize()
        
        self.Filepath = QtWidgets.QPushButton(self)
        self.Filepath.setText("OPEN")
        self.Filepath.setStyleSheet("background-color: #508CA4; color: white; font-weight: bold  ")
        self.Filepath.setFont(QFont('Arial', 18))
        self.Filepath.clicked.connect(self.getFilePath) # calls the clicked function when button is clicked
        self.Filepath.setGeometry(350,400,450,100)
        self.Filepath.adjustSize()
        
        mainLayout2.addWidget(self.Instruction1)
        mainLayout2.addWidget(self.Instruction2)
        mainLayout2.addWidget(self.Filepath)
        mainLayout2.addWidget(self.closeButton) # has to be in order of the displament in screen
        self.setLayout(mainLayout2)

    def displayInfo(self):
            self.show()
    
    
    def getFilePath(self):
        directory = QFileDialog().getExistingDirectory()
        os.chdir(directory)
        list = os.listdir(directory)
        
        self.createDirectories(directory)
        
    def createDirectories(self, directory):
        self.Instruction2.setText("By Clicking open two folders will be made")
        os.mkdir('Fake')
        os.mkdir('Clean')
        print(directory)
        self.seamlesslyCloningDetector.outputs(directory)
        
#=============================================================================

class SecondWindow(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        
        self.setWindowTitle('Instructions')
        self.setGeometry(400, 250, 1000, 500) # sets the size of the window (where its starts then size)
        mainLayout = QVBoxLayout()
       
        self.closeButton = QPushButton('Close')
        self.closeButton.clicked.connect(self.close)
        self.closeButton.move(0,300)# shows where its going to go
        
        
        self.closeButton = QtWidgets.QPushButton(self)
        self.closeButton.setText("CLOSE WINDOW")
        self.closeButton.setStyleSheet("background-color: #508CA4; color: white; font-weight: bold  ")
        self.closeButton.setFont(QFont('Arial', 18))
        self.closeButton.clicked.connect(self.close) # calls the clicked function when button is clicked
        #self.closeButton.setGeometry(350,400,450,100)

        #title for this window 
        self.InstructionsLabel = QtWidgets.QLabel(self) # sets where the label will be
        self.InstructionsLabel.setFont(QFont('Arial', 25))
        self.InstructionsLabel.move(400,0)# shows where its going to go
        self.InstructionsLabel.setText("Instructions:")
        self.InstructionsLabel.setAlignment(Qt.AlignCenter)
        self.InstructionsLabel.setStyleSheet("background-color: #508CA4; color: white; font-weight: bold ")
        self.InstructionsLabel.adjustSize()
        
        self.Instruction1 = QtWidgets.QLabel(self) # sets where the label will be
        self.Instruction1.setFont(QFont('Arial', 15))
        self.Instruction1.move(400,0)# shows where its going to go
        self.Instruction1.setText("1. To begin simply click 'OpenImage' and choose the Image  ")
        #self.Instruction1.setAlignment(Qt.AlignCenter)
        self.Instruction1.setStyleSheet("background-color: #508CA4; color: white; font-weight: bold ")
        self.Instruction1.adjustSize()
        
        self.Instruction2 = QtWidgets.QLabel(self) # sets where the label will be
        self.Instruction2.setFont(QFont('Arial', 15))
        self.Instruction2.move(400,0)# shows where its going to go
        self.Instruction2.setText("2. Either choose a Full image scan or ROI (region of interest) ")
        #self.Instruction2.setAlignment(Qt.AlignCenter)
        self.Instruction2.setStyleSheet("background-color: #508CA4; color: white; font-weight: bold ")
        self.Instruction2.adjustSize()
        
        self.Instruction3 = QtWidgets.QLabel(self) # sets where the label will be
        self.Instruction3.setFont(QFont('Arial', 15))
        self.Instruction3.move(400,0)# shows where its going to go
        self.Instruction3.setText("3. A output will be printed, if manual intervention ")
        #self.Instruction3.setAlignment(Qt.AlignCenter)
        self.Instruction3.setStyleSheet("background-color: #508CA4; color: white; font-weight: bold ")
        self.Instruction3.adjustSize()
        
        self.Instruction3Extra = QtWidgets.QLabel(self) # sets where the label will be
        self.Instruction3Extra.setFont(QFont('Arial', 15))
        self.Instruction3Extra.move(400,0)# shows where its going to go
        self.Instruction3Extra.setText("-look at the image and decide if you wish to put it as fake or clean")
        #self.Instruction3.setAlignment(Qt.AlignCenter)
        self.Instruction3Extra.setStyleSheet("background-color: #508CA4; color: white; font-weight: bold ")
        self.Instruction3Extra.adjustSize()
        
        
        self.Instruction4 = QtWidgets.QLabel(self) # sets where the label will be
        self.Instruction4.setFont(QFont('Arial', 15))
        self.Instruction4.move(400,0)# shows where its going to go
        self.Instruction4.setText("4. Comments can be added to an image in bottom right")
        #self.Instruction4.setAlignment(Qt.AlignCenter)
        self.Instruction4.setStyleSheet("background-color: #508CA4; color: white; font-weight: bold ")
        self.Instruction4.adjustSize()
        
        self.Instruction5 = QtWidgets.QLabel(self) # sets where the label will be
        self.Instruction5.setFont(QFont('Arial', 15))
        self.Instruction5.move(400,0)# shows where its going to go
        self.Instruction5.setText("5. Repeat Steps 1-4 for multiple images ")
        #self.Instruction5.setAlignment(Qt.AlignCenter)
        self.Instruction5.setStyleSheet("background-color: #508CA4; color: white; font-weight: bold ")
        self.Instruction5.adjustSize()
        
        mainLayout.addWidget(self.InstructionsLabel)
        mainLayout.addWidget(self.Instruction1)
        mainLayout.addWidget(self.Instruction2)
        mainLayout.addWidget(self.Instruction3)
        mainLayout.addWidget(self.Instruction3Extra)
        mainLayout.addWidget(self.Instruction4)
        mainLayout.addWidget(self.Instruction5)
        mainLayout.addWidget(self.closeButton) # has to be in order of the displament in screen
        
        self.setLayout(mainLayout)
        
#==============================================================================

    def displayInfo(self):
            self.show()
            
#---------------------------------------------------------------------------------

class SeamlesslyCloningDetector(QtWidgets.QWidget):
    def __init__(self, parent=None):
        super(SeamlesslyCloningDetector, self).__init__(parent)

        # Builds the GUI
        self.app = QApplication(sys.argv)
        self.app.setStyle("Fusion")
        qp = QPalette()
        qp.setColor(QPalette.Window, QColor(191, 215, 234))
        self.app.setPalette(qp)
        self.setGeometry(0, 50, 1900, 1000) # sets the size of the window (where its starts then size)
        self.setWindowTitle("GUI For Tool To Detect A Seamlessly Cloned Image")


        self.secondWindow = SecondWindow()
        self.firstWindow = FirstWindow()
        
        
        # shows the image inputted
        self.button = QtWidgets.QPushButton('Seamlessley Cloned Image Detector')
        self.button.setFont(QFont('Arial', 25))
        self.button.setStyleSheet("background-color: #508CA4; color: white; font-weight: bold ")
        self.button.setGeometry(180,350,500,50)
        self.image_frame = QtWidgets.QLabel()

        # image widgets (when the image is inputted it will show here )
        self.labelImage = QLabel()
        print("image Information:", self.labelImage)
        defaultImage = np.array(self.labelImage)
        layout = QVBoxLayout()
        layout.addWidget(self.labelImage)
        self.setLayout(layout)

        # Label widgets
        # Title Label
        self.TitleLabel = QtWidgets.QLabel(self) # sets where the label will be
        self.TitleLabel.setFont(QFont('Arial', 30))
        self.TitleLabel.move(10,10)# shows where its going to go
        self.TitleLabel.setText("Seamlessly Cloned Image Detector")
        self.TitleLabel.setAlignment(Qt.AlignCenter)
        self.TitleLabel.setStyleSheet("background-color: #508CA4; color: white; font-weight: bold ")
        self.TitleLabel.adjustSize()

        # Instructions label
        #self.InstructionLabel = QtWidgets.QLabel(self) # sets where the label will be
        #self.InstructionLabel.setFont(QFont('Arial', 15))
        #self.InstructionLabel.move(250,110)# shows where its going to go
        #self.InstructionLabel.setText("Open an Image to begin")
        #self.InstructionLabel.setAlignment(Qt.AlignCenter)
        #self.InstructionLabel.setStyleSheet("background-color: #508CA4; color: white; font-weight: bold ")
        #self.InstructionLabel.adjustSize()

        # label for image pannel
        self.ImageLabel = QtWidgets.QLabel(self) # sets where the label will be
        self.ImageLabel.setFont(QFont('Arial', 18))
        self.ImageLabel.move(150,800)# shows where its going to go
        self.ImageLabel.setText("Image will be shown above when activated")
        self.ImageLabel.setAlignment(Qt.AlignCenter)
        self.ImageLabel.setStyleSheet("background-color: #508CA4; color: white; font-weight: bold ")
        self.ImageLabel.adjustSize()

        # label for 'output of results is'
        self.outputLabel = QtWidgets.QLabel(self) # sets where the label will be
        self.outputLabel.setFont(QFont('Arial', 18))
        self.outputLabel.move(1100,575)# shows where its going to go
        self.outputLabel.setText("Results of the image scan is:")
        self.outputLabel.setAlignment(Qt.AlignCenter)
        self.outputLabel.setStyleSheet("background-color: #508CA4; color: white; font-weight: bold ")
        self.outputLabel.adjustSize()
        
        self.commentsLabel = QtWidgets.QLabel(self) # sets where the label will be
        self.commentsLabel.setFont(QFont('Arial', 11))
        self.commentsLabel.setAlignment(Qt.AlignCenter)
        self.commentsLabel.move(1300,925)# shows where its going to go
        self.commentsLabel.setStyleSheet("background-color: #508CA4; color: white; font-weight: bold ")

        # output label for what the image result is
        self.Result = QtWidgets.QLabel(self) # sets where the label will be
        self.Result.setFont(QFont('Arial', 18))
        self.Result.setAlignment(Qt.AlignCenter)
        self.Result.move(1150,650)# shows where its going to go
        self.Result.setStyleSheet("background-color: #508CA4; color: white; font-weight: bold ")

        # Explanation
        self.explanation = QtWidgets.QLabel(self) # sets where the label will be
        self.explanation.setAlignment(Qt.AlignCenter)
        self.explanation.setFont(QFont('Arial', 18))
        self.explanation.setAlignment(Qt.AlignCenter)
        self.explanation.move(1150,700)# shows where its going to go
        self.explanation.setStyleSheet("background-color: #508CA4; color: white; font-weight: bold ")
        
        self.Prompt = QtWidgets.QLabel(self) # sets where the label will be
        self.Prompt.setFont(QFont('Arial', 11))
        self.Prompt.setAlignment(Qt.AlignCenter)
        self.Prompt.move(1080,820)# shows where its going to go
        self.Prompt.setStyleSheet("background-color: #508CA4; color: white; font-weight: bold ")
        self.Prompt.setText("Enter Comments about Image: ")
        self.Prompt.adjustSize()

        #explanation 2
        self.explanation2 = QtWidgets.QLabel(self) # sets where the label will be
        self.explanation2.setFont(QFont('Arial', 18))
        self.explanation2.setAlignment(Qt.AlignCenter)
        self.explanation2.move(1150,750)# shows where its going to go
        self.explanation2.setStyleSheet("background-color: #508CA4; color: white; font-weight: bold ")

        #label for probability
        self.ProbabilityLabel = QtWidgets.QLabel(self) # sets where the label will be
        self.ProbabilityLabel.setFont(QFont('Arial', 18))
        self.ProbabilityLabel.setAlignment(Qt.AlignCenter)
        self.ProbabilityLabel.move(1150,300)# shows where its going to go
        self.ProbabilityLabel.setStyleSheet("background-color: #508CA4; color: white; font-weight: bold ")

        #whole image scan
        self.activateButtonWhole = QtWidgets.QPushButton(self)
        self.activateButtonWhole.setText("Full Image Scan")
        self.activateButtonWhole.setFont(QFont('Arial', 18))
       # self.TitleLabel.setAlignment(Qt.AlignCenter)
        self.activateButtonWhole.setStyleSheet("background-color: #508CA4; color: white; font-weight: bold ")
        self.activateButtonWhole.setGeometry(1100,140,350,100)

        #Activate button for ROI scan
        self.activateButtonROI = QtWidgets.QPushButton(self)
        self.activateButtonROI.setText("ROI Scan")
        self.activateButtonROI.setFont(QFont('Arial', 18))
        self.activateButtonROI.setStyleSheet("background-color: #508CA4; color: white; font-weight: bold ")
        self.activateButtonROI.setGeometry(1500,140,350,100)

        #label created for when input is clicked
        self.activateLabel = QtWidgets.QLabel(self) # sets where the label will be
        self.activateLabel.setAlignment(Qt.AlignCenter)
        self.activateLabel.setFont(QFont('Arial', 18))
        self.activateLabel.move(750,600)# shows where its going to go

        #probability button
        self.probabilityButton = QtWidgets.QPushButton(self)
        self.probabilityButton.setText("Generate New Probability")
        self.probabilityButton.setStyleSheet("background-color: #508CA4; color: white; font-weight: bold  ")
        self.probabilityButton.setFont(QFont('Arial', 18))
        self.probabilityButton.clicked.connect(self.clickedProbability) # calls the clicked function when button is clicked
        self.probabilityButton.setGeometry(1250,375,450,100)

        #Button created for fake
        self.FakeButton = QtWidgets.QPushButton(self)
        self.FakeButton.setText("Refer as Fake")
        self.FakeButton.setStyleSheet("background-color: #D2829A; color: #black; font-weight: bold  ")
        self.FakeButton.setFont(QFont('Arial', 18))
        self.FakeButton.setGeometry(100,875,400,100)

        # okay button
        self.okayButton = QtWidgets.QPushButton(self)
        self.okayButton.setText("Refer as OK")
        self.okayButton.setStyleSheet("background-color: #C2ECC6; color: black; font-weight: bold ")
        self.okayButton.setFont(QFont('Arial', 18))
        self.okayButton.setGeometry(525,875,400,100)

        #finds the image in directory
        self.SearchButton = QtWidgets.QPushButton(self)
        self.SearchButton.setText("Open Image")
        self.SearchButton.setStyleSheet("background-color: #508CA4; color: white; font-weight: bold ")
        self.SearchButton.clicked.connect(self.getimage) # calls the clicked function when button is clicked
        self.SearchButton.clicked.connect(self.clickedProbability) # calls the clicked function when button is clicked
        self.SearchButton.setFont(QFont('Arial', 15))
        self.SearchButton.setGeometry(1300,20,350,100)
   
  
      
        #adds comments to the file      
        self.commentsBox = QTextEdit(self)
        self.commentsBox.move(1055, 850)
        self.commentsBox.resize(600,50)
        
        #button to add to comments to file
        self.saveButton = QtWidgets.QPushButton(self)
        self.saveButton.setText("save comments")
        self.saveButton.setStyleSheet("background-color: #508CA4; color: white; font-weight: bold ")
        self.saveButton.setFont(QFont('Arial', 11))
        self.saveButton.clicked.connect(self.imageComments)
        self.saveButton.setGeometry(1675,850,200,50)
        
        self.Instructions = QtWidgets.QPushButton(self)
        self.Instructions.setText("Instructions")
        self.Instructions.setStyleSheet("background-color: #508CA4; color: white; font-weight: bold  ")
        self.Instructions.setFont(QFont('Arial', 18))
        self.Instructions.clicked.connect(self.passingInformationInstructions)
        self.Instructions.setGeometry(300,100,400,40)


        self.FileSelection = QtWidgets.QPushButton(self)
        self.FileSelection.setText("select")
        self.FileSelection.setFont(QFont('Arial', 18))
       # self.TitleLabel.setAlignment(Qt.AlignCenter)
        self.FileSelection.setStyleSheet("background-color: #508CA4; color: white; font-weight: bold ")
        self.FileSelection.clicked.connect(self.passingInformationFilePaths)
        self.FileSelection.setGeometry(100,140,350,100)

# ---------------------------------Finding the image----------------------------------------------------------------------
    def getimage(self):
             filename, _ = QFileDialog.getOpenFileName(self, 'Open Image File')

             defaultImage = cv2.imread(filename)
             image = cv2.imread(filename)
             print("\n")
             print(filename)
             
             self.image = cv2.resize(image,(1000,600))
             self.image = QtGui.QImage(self.image.data, self.image.shape[1], self.image.shape[0], QtGui.QImage.Format_RGB888).rgbSwapped()
             self.labelImage.setPixmap(QtGui.QPixmap.fromImage(self.image))
             self.probabilityButton.clicked.connect(self.clickedProbability)
             self.activateButtonWhole.clicked.connect(lambda: self.show_image(defaultImage))
             self.activateButtonROI.clicked.connect(lambda: self.ROI(defaultImage))
             self.FakeButton.clicked.connect(lambda: self.manualInterventionFake(defaultImage))
             self.okayButton.clicked.connect(lambda: self.manualInterventionClean(defaultImage))


# ---------------------------------QPainter ----------------------------------------------------------------------

    def paintEvent(self, GUIdesign): #all brush widgets to add detail to desig

        RightPannel = QPainter(self)
        RightPannel.setPen(QColor(46,134,171))
        RightPannel.setBrush(QColor(191, 215, 234))
        RightPannel.drawRect(1050,0,1000,1500)

        imagePannel = QPainter(self)
        imagePannel.setPen(QColor(46,134,171))
        imagePannel.setBrush(QColor(206, 225, 240))
        imagePannel.drawRect(0,150,1050,700)

        probabilityPannel = QPainter(self)
        probabilityPannel.setPen(QColor(46,134,171))
        probabilityPannel.setBrush(QColor(206, 225, 240))
        probabilityPannel.drawRect(1050,250,1050,300)

 # ---------------------------------Comments ----------------------------------------------------------------------

    def imageComments(self):
        filename = QFileDialog.getSaveFileName(self, 'Save File', os.getenv('HOME'))
        with open(filename[0], 'w+') as f:
            my_text = self.commentsBox.toPlainText()
            f.write(my_text)
            self.commentsLabel.setText(" ")
            self.commentsLabel.adjustSize()
            self.hideComment()
              
    def hideComment(self):
        time.sleep(2)
        self.commentsBox.clear()
        self.commentsLabel.clear()
        self.commentsLabel.setText("Comment Saved!")
        self.commentsLabel.adjustSize()
      
    def passingInformationInstructions(self):
        self.secondWindow.displayInfo()
        
    def passingInformationFilePaths(self):
        print("hello")
        self.firstWindow.displayInfo()
        
 # ---------------------------------ROI ----------------------------------------------------------------------


    #@QtCore.pyqtSlot()
    #shows the image on the GUI
    def ROI(self, defaultImage):
        print("we up to here")

        roiAdded = defaultImage
        if __name__ == '__main__':

            # Read image
            im = roiAdded
            showCrosshair = False
            fromCenter = False
            r = cv2.selectROI(im, fromCenter)
            # Crop image
            CroppedImage = im[int(r[1]):int(r[1] + r[3]), int(r[0]):int(r[0] + r[2])]
            # Display cropped image
            cv2.imshow("Image", CroppedImage)
            cv2.waitKey(0)

        self.show_imageROI(CroppedImage)
        cv2.destroyAllWindows()

# ---------------------------------Shows ROI PHOTO ----------------------------------------------------------------------


    def show_imageROI(self, CroppedImage):
        defaultImage = CroppedImage
        #print(defaultImage)
        self.image = cv2.resize(defaultImage, (1000, 600)) # for example
        self.image = QtGui.QImage(self.image.data, self.image.shape[1], self.image.shape[0], QtGui.QImage.Format_RGB888).rgbSwapped()
        self.image_frame.setPixmap(QtGui.QPixmap.fromImage(self.image))
        #self.ROI(defaultImage)
        self.explanation.setText("IMAGE PROCESSING PLEASE WAIT....")
        self.ROIImage(defaultImage)

# ---------------------------------Start of Program ----------------------------------------------------------------------


    #will need to potentially make another one of these
    def show_image(self, defaultImage):
        #defaultImage = cv2.imread('C:\\Users\\James\\Desktop\\SeamlessCloning\\SCImages\\Sky+planeOutput.jpg')
        self.image = cv2.resize(defaultImage, (1000, 600)) # for example
        self.image = QtGui.QImage(self.image.data, self.image.shape[1], self.image.shape[0], QtGui.QImage.Format_RGB888).rgbSwapped()
        self.image_frame.setPixmap(QtGui.QPixmap.fromImage(self.image))
        self.explanation.setText("IMAGE PROCESSING PLEASE WAIT....")
        #self.ROI(defaultImage)
        self.FullImage(defaultImage)

  # ---------------------------------Start of Program ----------------------------------------------------------------------


    def clickedProbability(self):
        
        value = random.randint(1, 100)
        self.ProbabilityLabel.setText("Probability of image being fake: " + str(value) + '%')
        self.outputLabel.setStyleSheet("background-color: #508CA4; color: white; font-weight: bold ")
        self.ProbabilityLabel.adjustSize()
        self.update()


# --------------------------------- End of program----------------------------------------------------------------------


    def ROIImage(self, defaultImage):
       
        print("\n")
        print("Collecting RGB values...")
        print("\n")


        greyscale = defaultImage
        imageToSplit = defaultImage
        averageRGB = defaultImage
        imageHeight = imageToSplit.shape[0]
        imageWidth = imageToSplit.shape[1]

        averageRGB = cv2.cvtColor(averageRGB, cv2.COLOR_BGR2RGB)  # convert it to RGB channel
        r = averageRGB[:, :, 0]
        g = averageRGB[:, :, 1]
        b = averageRGB[:, :, 2]

        #greyscale
        grey = cv2.cvtColor(greyscale, cv2.COLOR_BGR2GRAY)
        imageToSplitGrey = grey

        greyHigh = 0
        greyLow = 0

        imageHeightGrey = imageToSplitGrey.shape[0]
        imageWidthGrey = imageToSplitGrey.shape[1]

        minimumBlueChannelValue = 0
        maximumBlueChannelValue = 0
        minimumGreenChannelValue = 0
        maximumGreenChannelValue = 0
        minimumRedChannelValue = 0
        maximumRedChannelValue = 0

        for y in range(imageHeight):
            for x in range(imageWidth):

                blueChannel = imageToSplit[y, x, 0]  # splits blue channel
                greenChannel = imageToSplit[y, x, 1]  # splits green channel
                redChannel = imageToSplit[y, x, 2]  # splits red channel

                 # checks every value and replaces the value if it is higher than the currently saved in the variable
                if redChannel > maximumRedChannelValue:
                    maximumRedChannelValue = redChannel

                if redChannel < minimumRedChannelValue:
                    minimumRedChannelValue = redChannel

                if greenChannel > maximumGreenChannelValue:
                    maximumGreenChannelValue = greenChannel

                if greenChannel < minimumGreenChannelValue:
                    minimumGreenChannelValue = greenChannel

                if blueChannel > maximumBlueChannelValue:
                    maximumBlueChannelValue = blueChannel

                if blueChannel < minimumBlueChannelValue:
                    minimumBlueChannelValue = blueChannel
        #grey scale for loop
        for y in range(imageHeightGrey):  # by row
            for x in range(imageWidthGrey):  # by column

                greyChannel = imageToSplitGrey[y, x,]

                if greyChannel > greyHigh:
                    greyHigh = greyChannel

                if greyChannel < greyLow:
                    greyLow = greyChannel

        GreyAverage = np.average(grey, axis=(0, 1))

        averageR = np.average(r, axis=(0, 1))
        averageG = np.average(g, axis=(0, 1))
        averageB = np.average(b, axis=(0, 1))

        RGBValuesTable = PrettyTable()

        # creates the rows and columns in the table
        RGBValuesTable.field_names = ["Channel:", "Highest", "Lowest", "Average"]
        RGBValuesTable.add_row(["Red:", maximumRedChannelValue, minimumRedChannelValue, averageR])
        RGBValuesTable.add_row(["Green:", maximumGreenChannelValue, minimumGreenChannelValue, averageG])
        RGBValuesTable.add_row(["Blue:", maximumBlueChannelValue, minimumBlueChannelValue, averageB])
        RGBValuesTable.add_row(["GreyScale:", greyHigh, greyLow, GreyAverage])
        # Creates
        print("HIGHS AND LOWS OF IMAGE")
        print(RGBValuesTable)
        print("\n")


        self.thresholdsWHOLE(maximumRedChannelValue, maximumGreenChannelValue, maximumBlueChannelValue,
                 minimumRedChannelValue, minimumGreenChannelValue, minimumBlueChannelValue,
                 averageR, averageG, averageB, defaultImage, greyHigh, greyLow, GreyAverage)

 # --------------------------------- End of program----------------------------------------------------------------------

    def FullImage(self, defaultImage):
        print("Full image selected")
        print("---------------------------------------------------")
        print("Collecting RGB values...")
        print("\n")

        greyscale = defaultImage
        imageToSplit = defaultImage
        averageRGB = defaultImage
        imageHeight = imageToSplit.shape[0]
        imageWidth = imageToSplit.shape[1]

        averageRGB = cv2.cvtColor(averageRGB, cv2.COLOR_BGR2RGB)  # convert it to RGB channel
        r = averageRGB[:, :, 0]
        g = averageRGB[:, :, 1]
        b = averageRGB[:, :, 2]

        #greyscale
        grey = cv2.cvtColor(greyscale, cv2.COLOR_BGR2GRAY)
        imageToSplitGrey = grey

        greyHigh = 0
        greyLow = 0

        imageHeightGrey = imageToSplitGrey.shape[0]
        imageWidthGrey = imageToSplitGrey.shape[1]

        minimumBlueChannelValue = 0
        maximumBlueChannelValue = 0
        minimumGreenChannelValue = 0
        maximumGreenChannelValue = 0
        minimumRedChannelValue = 0
        maximumRedChannelValue = 0

        for y in range(imageHeight):
            for x in range(imageWidth):

                blueChannel = imageToSplit[y, x, 0]  # splits blue channel
                greenChannel = imageToSplit[y, x, 1]  # splits green channel
                redChannel = imageToSplit[y, x, 2]  # splits red channel

                 # checks every value and replaces the value if it is higher than the currently saved in the variable
                if redChannel > maximumRedChannelValue:
                    maximumRedChannelValue = redChannel

                if redChannel < minimumRedChannelValue:
                    minimumRedChannelValue = redChannel

                if greenChannel > maximumGreenChannelValue:
                    maximumGreenChannelValue = greenChannel

                if greenChannel < minimumGreenChannelValue:
                    minimumGreenChannelValue = greenChannel

                if blueChannel > maximumBlueChannelValue:
                    maximumBlueChannelValue = blueChannel

                if blueChannel < minimumBlueChannelValue:
                    minimumBlueChannelValue = blueChannel
        #grey scale for loop
        for y in range(imageHeightGrey):  # by row
            for x in range(imageWidthGrey):  # by column
                greyChannel = imageToSplitGrey[y, x,]

                if greyChannel > greyHigh:
                    greyHigh = greyChannel

                if greyChannel < greyLow:
                    greyLow = greyChannel
        GreyAverage = np.average(grey, axis=(0, 1))

        averageR = np.average(r, axis=(0, 1))
        averageG = np.average(g, axis=(0, 1))
        averageB = np.average(b, axis=(0, 1))

        RGBValuesTable = PrettyTable()

        # creates the rows and columns in the table
        RGBValuesTable.field_names = ["Channel:", "Highest", "Lowest", "Average"]
        RGBValuesTable.add_row(["Red:", maximumRedChannelValue, minimumRedChannelValue, averageR])
        RGBValuesTable.add_row(["Green:", maximumGreenChannelValue, minimumGreenChannelValue, averageG])
        RGBValuesTable.add_row(["Blue:", maximumBlueChannelValue, minimumBlueChannelValue, averageB])
        RGBValuesTable.add_row(["GreyScale:", greyHigh, greyLow, GreyAverage])
        # Creates
        print("HIGHS AND LOWS OF IMAGE")
        print(RGBValuesTable)
        print("\n")


        self.thresholdsWHOLE(maximumRedChannelValue, maximumGreenChannelValue, maximumBlueChannelValue,
                 minimumRedChannelValue, minimumGreenChannelValue, minimumBlueChannelValue,
                 averageR, averageG, averageB, defaultImage, greyHigh, greyLow, GreyAverage)

# ---------------------------------Start of Program ----------------------------------------------------------------------


    def thresholdROI(self, maximumRedChannelValue,maximumGreenChannelValue,maximumBlueChannelValue,
                 minimumRedChannelValue,minimumGreenChannelValue,minimumBlueChannelValue,
                 averageR, averageB, averageG, defaultImage, greyHigh, greyLow, GreyAverage):

        rAverageROI = 100.755
        gAverageROI = 85.4265
        bAverageROI = 73.3518
        greyAverageROI = 93.49619315

        rThresholdROI = 202.35
        gThresholdROI = 200.467
        bThresholdROI = 196.35
        greyThresholdROI = 205.5166667


        rDifference = maximumRedChannelValue - minimumRedChannelValue
        gDifference = maximumGreenChannelValue - minimumGreenChannelValue
        bDifference = maximumBlueChannelValue - minimumBlueChannelValue
        greyDifference = greyHigh - greyLow

        # R Channel
        if rDifference < rThresholdROI:
            #print("R channel is fake")
            FakeR = 'Fake'
        elif rDifference > rThresholdROI:
            #print("R channel is not fake")
            FakeR = 'Not Fake'
        else:
            print("An Error has occured please re-run")

        # GChannel
        if gDifference < gThresholdROI:
            #
            #print("G channel is fake")
            FakeG = 'Fake'
        elif gDifference > gThresholdROI:
            #print("G channel is not fake")
            FakeG = 'Not Fake'
        else:
            print("An Error has occured please re-run")

        # BChannel
        if bDifference < bThresholdROI:
            #
            #print("B channel is fake")
            FakeB = 'Fake'
        elif bDifference > bThresholdROI:
            #
            #print("B channel is not fake")
            FakeB = 'Not Fake'
        else:
            print("An Error has occured please re-run")

        #greyChannel

        if greyDifference < greyThresholdROI:
            #
            #print("B channel is fake")
            FakeGrey = 'Fake'
        elif greyDifference > greyThresholdROI:
            #
            #print("B channel is not fake")
            FakeGrey = 'Not Fake'
        else:
            print("An Error has occured please re-run")


        #average R channel

        if averageR < rAverageROI:
            #
            #print("Average R channel is fake ")
            AverageFakeR = 'Fake'

        elif averageR > rAverageROI:
            AverageFakeR = 'Not Fake'
            #
            #print("Average R is not fake")

        else:
            print("Error start again")

            # average G channel

        if averageG < gAverageROI:
            #
            #print("Average R channel is fake ")
            AverageFakeG = 'Fake'

        elif averageG > gAverageROI:
            AverageFakeG = 'Not Fake'
            #
            #print("Average G is not fake")

        else:
            print("Error start again")

            # average B channel

        if averageB < bAverageROI:
            #
            #print("Average B channel is fake ")
            AverageFakeB = 'Fake'

        elif averageB > bAverageROI:
            AverageFakeB = 'Not Fake'
            #
            #print("Average B is not fake")

        else:
            print("Error start again")

        #average grey channel
        if GreyAverage < greyAverageROI:
            #
            #("Grey channel is fake")
            AverageFakeGrey = 'Fake'

        elif GreyAverage > greyAverageROI:
            #print("Grey channel is not fake")
            AverageFakeGrey = 'Not Fake'

        else:
            print("An Error has occured please re-run")


        RGBValuesTableResultsROI = PrettyTable()

        # creates the rows and columns in the table
        RGBValuesTableResultsROI.field_names = ["KEY", "Channel:", "Result:"]
        RGBValuesTableResultsROI.add_row(["False", "H/L RED Channel: ", FakeR])
        RGBValuesTableResultsROI.add_row([" = ", "H/L GREEN Channel:" ,FakeG ])
        RGBValuesTableResultsROI.add_row([" FAKE, ","H/L BLUE Channel: ", FakeB])
        RGBValuesTableResultsROI.add_row([" TRUE ", "AVERAGE RED Channel: ", AverageFakeR])
        RGBValuesTableResultsROI.add_row([" = ","AVERAGE GREEN Channel: ", AverageFakeG])
        RGBValuesTableResultsROI.add_row([" NOT FAKE ", "AVERAGE BLUE Channel: ", AverageFakeB])
        RGBValuesTableResultsROI.add_row(["  ", "Grey Channel: ", FakeGrey])
        RGBValuesTableResultsROI.add_row(["  ", "AVERAGE Grey Channel: ", AverageFakeGrey])


        # Creates
        print("-------------------------------------------------")
        print("LEGITIMACY OF CHANNEL")
        print(RGBValuesTableResultsROI)
        print("\n")

        self.Calculations(FakeR, FakeG, FakeB, AverageFakeR, AverageFakeG, AverageFakeB, image, FakeGrey, AverageFakeGrey)

# ---------------------------------Start of Program ----------------------------------------------------------------------


    def thresholdsWHOLE(self, maximumRedChannelValue, maximumGreenChannelValue, maximumBlueChannelValue,
                 minimumRedChannelValue, minimumGreenChannelValue, minimumBlueChannelValue,
                 averageR, averageG, averageB, DefaultImage, greyHigh, greyLow, GreyAverage):

            #fakeTest
            rThresholdWHOLE = 216.03
            gThresholdWHOLE = 216.458
            bThresholdWHOLE = 210.8333
            greyTresholdWHOLE = 226.2166667
            rAverageWHOLE = 114.80875
            gAverageWHOLE = 106.7195952
            bAverageWHOLE = 93.69226359
            greyAverageWHOLE = 125.1069737


            #rThresholdWHOLE = 1
            #gThresholdWHOLE = 1
            #bThresholdWHOLE = 1
            #greyTresholdWHOLE = 1


            #rAverageWHOLE = 1
            #gAverageWHOLE = 1
            #bAverageWHOLE = 1
            #greyAverageWHOLE = 1

            #FakeR = ''

            #FakeG = ''
            #FakeB = ''

            rDifference = maximumRedChannelValue - minimumRedChannelValue
            gDifference = maximumGreenChannelValue - minimumGreenChannelValue
            bDifference = maximumBlueChannelValue - minimumBlueChannelValue
            greyDifference = greyHigh - greyLow

            #print (rDifference, gDifference, bDifference)

            # R Channel
            if rDifference < rThresholdWHOLE:
                #print("R channel is fake")
                FakeR = 'Fake'
            elif rDifference > rThresholdWHOLE:
                #print("R channel is not fake")
                FakeR = 'Not Fake'
            else:
                print("An Error has occured please re-run")

            # GChannel
            if gDifference < gThresholdWHOLE:
                #print("G channel is fake")
                FakeG = 'Fake'
            elif gDifference > gThresholdWHOLE:
                # print("G channel is not fake")
                FakeG = 'Not Fake'
            else:
                print("An Error has occured please re-run")

            # BChannel
            if bDifference < bThresholdWHOLE:
                #print("B channel is fake")
                FakeB = 'Fake'
            elif bDifference > bThresholdWHOLE:
                #print("B channel is not fake")
                FakeB = 'Not Fake'
            else:
                print("An Error has occured please re-run")

            # grey channel
            if greyDifference < greyTresholdWHOLE:
                #print("grey channel is fake")
                FakeGrey = 'Fake'
            elif greyDifference > greyTresholdWHOLE:
                #print("grey channel is not fake")
                FakeGrey = 'Not Fake'
            else:
                print("An Error has occured please re-run")

            # average R channel

            if averageR < rAverageWHOLE:
                #print("Average R channel is fake ")
                AverageFakeR = 'Fake'

            elif averageR > rAverageWHOLE:
                AverageFakeR = 'Not Fake'
                #print("Average R is not fake")

            else:
                print("Error start again")

                # average G channel

            if averageG < gAverageWHOLE:
                #print("Average R channel is fake ")
                AverageFakeG = 'Fake'

            elif averageG > gAverageWHOLE:
                AverageFakeG = 'Not Fake'
                #print("Average G is not fake")

            else:
                print("Error start again")

                # average B channel

            if averageB < bAverageWHOLE:
                #print("Average B channel is fake ")
                AverageFakeB = 'Fake'

            elif averageB > bAverageWHOLE:
                AverageFakeB = 'Not Fake'
                #print("Average B is not fake")

            else:
                print("Error start again")

                # average grey channel
            if GreyAverage < greyAverageWHOLE:
                #print("Grey channel is fake")
                AverageFakeGrey = 'Fake'
            elif GreyAverage > greyAverageWHOLE:
                #print("grey channel is not fake")
                AverageFakeGrey = 'Not Fake'
            else:
                print("An Error has occured please re-run")

            RGBValuesTableResultsROI = PrettyTable()

            # creates the rows and columns in the table
            RGBValuesTableResultsROI.field_names = ["KEY", "Channel:", "Result:"]
            RGBValuesTableResultsROI.add_row(["False", "H/L RED Channel: ", FakeR])
            RGBValuesTableResultsROI.add_row([" = ", "H/L GREEN Channel:", FakeG])
            RGBValuesTableResultsROI.add_row([" FAKE, ", "H/L BLUE Channel: ", FakeB])
            RGBValuesTableResultsROI.add_row([" TRUE ", "AVERAGE RED Channel: ", AverageFakeR])
            RGBValuesTableResultsROI.add_row([" = ", "AVERAGE GREEN Channel: ", AverageFakeG])
            RGBValuesTableResultsROI.add_row([" NOT FAKE ", "AVERAGE BLUE Channel: ", AverageFakeB])
            RGBValuesTableResultsROI.add_row(["  ", "Grey Channel: ", FakeGrey])
            RGBValuesTableResultsROI.add_row(["  ", "AVERAGE Grey Channel: ", AverageFakeGrey])

            # Creates
            print("-------------------------------------------------")
            print("LEGITIMACY OF CHANNEL")
            print(RGBValuesTableResultsROI)
            print("\n")
    #------------------------------------------------------------------------------

            self.Calculations(FakeR, FakeG, FakeB, AverageFakeR, AverageFakeG, AverageFakeB, DefaultImage, FakeGrey, AverageFakeGrey)



    def Calculations(self, FakeR, FakeG, FakeB, AverageFakeR, AverageFakeG, AverageFakeB, DefaultImage, FakeGrey, AverageFakeGrey):

            rResult = ''
            gResult = ''
            bResult = ''
            greyResult = ''

            rAverage = ''
            gAverage = ''
            bAverage = ''
            GreyAverage = ''

            if FakeR == 'Fake':
                rResult = 12.375
            elif FakeR == 'Not Fake':
                rResult = 0
            else:
                print("An Error has occurred please re-run")

            if FakeG == 'Fake':
                gResult = 12.375
            elif FakeG == 'Not Fake':
                gResult = 0
            else:
              print("An Error has occured please re-run")

            if FakeB == 'Fake':
                bResult = 12.375
            elif FakeB == 'Not Fake':
                bResult = 0
            else:
                print("An Error has occured please re-run")

            '''     #grey channel
            if FakeGrey == False:
                greyResult = 9.9
            elif FakeGrey == True:
                greyResult = 0
            else:
                print("An Error has occured please re-run")
            '''
            #Averages

            if AverageFakeR == 'Fake':
                rAverage = 12.375
            elif AverageFakeR == 'Not Fake':
                rAverage = 0
            else:
                print("An Error has occured please re-run ")

            #GreenAverage

            if AverageFakeG == 'Fake':
                gAverage = 12.375
            elif AverageFakeG == 'Not Fake':
                gAverage = 0
            else:
                print("An Error has occured please re-run ")

            #BAverage

            if AverageFakeB == 'Fake':
                bAverage = 12.375
            elif AverageFakeB == 'Not Fake':
                bAverage = 0
            else:
                print("An Error has occured please re-run ")

                #average grey channel
            if AverageFakeGrey == 'Fake':
                greyAverage = 12.375
            elif AverageFakeGrey == 'Not Fake':
                greyAverage = 0
            else:
                print("An Error has occured please re-run")
            Results = rResult + gResult + bResult + rAverage + gAverage + bAverage + greyAverage



            self.outputs(Results, DefaultImage)

# ---------------------------------Start of Program ----------------------------------------------------------------------


    def outputs(self, Results, DefaultImage, directory):
            print("Result of Image scan is: ")
            print(Results)

            if Results == 0:
                    print("Image is",Results,"% Fake, This is Image is not seamlessly cloned")
                    time.sleep(2)
                    self.CLEAN(DefaultImage, Results)
            elif Results == 12.375:
                    print("Image is",Results,"% Fake, This is Image unlikly to be seamlessly cloned")
                    time.sleep(2)
                    self.CLEAN(DefaultImage, Results)
            elif Results == 24.75:
                    print('Image is', Results , '% Fake, This is Image unlikly to be seamlessly cloned')
                    time.sleep(2)
                    self.CLEAN(DefaultImage, Results)
            elif Results == 37.125:
                    print('Image is', Results , '% fake, REFER!: Manual intervention needed!')
                    time.sleep(2)
                    self.MANUALINTERVENTION(DefaultImage, Results)
            elif Results == 49.5:
                    print('Image is', Results , '% fake, REFER!: Manual intervention needed!')
                    time.sleep(2)
                    self.MANUALINTERVENTION(DefaultImage, Results)
            elif Results == 61.875:
                    print('Image is',Results , '% fake, REFER!: Manual intervention needed!')
                    time.sleep(2)
                    self.MANUALINTERVENTION(DefaultImage, Results)
            elif Results == 59.4:
                    print('Image is',Results , '% fake, REFER!: Manual intervention needed!')
                    time.sleep(2)
                    self.MANUALINTERVENTION(DefaultImage, Results)
            elif Results == 74.25:
                    print('Image is',Results , '% fake, REFER!: Manual intervention needed!')
                    time.sleep(2)
                    self.MANUALINTERVENTION(DefaultImage, Results)
            elif Results == 86.625:
                    print('Image is',Results , '% fake, THIS IMAGE IS LIKELY TO BE FAKE')
                    time.sleep(2)
                    self.FAKEREFER(DefaultImage, Results)

                    #add if grey high and low is added
                    #elif Results == 89.1:
                        # print('Image is', Results, '% fake, THIS IMAGE IS LIKELY TO BE FAKE')
                        # FAKEREFER(DefaultImage)
            elif Results == 99:
                    print('Image is', Results, '% fake, FAKE: DO NOT UPLOAD THIS IMAGE IS FAKE')
                    time.sleep(2)
                    self.FAKEREFER(DefaultImage, Results)
            else:
                    print("Number not recognized")
            print("-------------------------------------------")

# ---------------------------------Start of Program ----------------------------------------------------------------------


    def FAKEREFER(self, DefaultImage, Results):
             print("\n")
             print("-----------------------------------------")
             print("image is not clean")
             img_src = cv2.imwrite('C:\\Users\\James\\Desktop\\SeamlessCloning\\Referals\\FAKE\\FAKE.jpg', DefaultImage)
             print( img_src, "has been added to the FAKE FOLDER")
             print("-----------------------------------------")
             self.Result.setText("THIS IMAGE IS " + str(Results) + "% , FAKE" )
             self.explanation.setText("THIS IMAGE IS LIKELY TO BE FAKE" )
             self.explanation2.setText("DO NOT UPLOAD THIS IMAGE IS FAKE")
             self.Result.adjustSize()
             self.explanation.adjustSize()
             self.explanation2.adjustSize()
             self.update()
             #endOfProgram()

# ---------------------------------Start of Program ----------------------------------------------------------------------


    def CLEAN(self, DefaultImage, Results):
             print("\n")
             print("-----------------------------------------")
             print("image is clean")
             cv2.imwrite('C:\\Users\\James\\Desktop\\SeamlessCloning\\Referals\\CLEAN\\FAKE.jpg', DefaultImage)
             print("Image has been added to the CLEAN FOLDER")
             print("-----------------------------------------")
             self.Result.setText("THIS IMAGE IS" + str(Results) + "% , FAKE" )
             self.explanation.setText("THIS IMAGE IS UNLIKELY TO BE" )
             self.explanation2.setText("SEAMLESSLEY CLONED")
             self.Result.adjustSize()
             self.explanation.adjustSize()
             self.explanation2.adjustSize()
             self.update()

             #endOfProgram()

# ---------------------------------Start of Program ----------------------------------------------------------------------


    def MANUALINTERVENTION(self, DefaultImage, Results):
             print("manual intervention")
             self.Result.setText("THIS IMAGE IS " + str(Results) + "% , FAKE" )
             self.explanation.setText("MANUAL INTERVENTION NEEDED")
             self.explanation2.setText("VIEW THE IMAGE AND CLICK RESPONSE")
            # self.okayButton.clicked.connect(self.manualInterventionClean, self.DefaultImage)

            # if self.okayButton.isEnabled():
              #   print("Clicked!")
              #   self.okayButton.setEnabled()
            # else:
                # print("not been clicked")
               #  self.okayButton.setEnabled()


             self.Result.adjustSize()
             self.explanation.adjustSize()
             self.explanation2.adjustSize()
             self.update()
             #self.manualInterventionFake(DefaultImage)
 # ---------------------------------Start of Program ----------------------------------------------------------------------


    def manualInterventionFake(self, DefaultImage):
            print("This image has been refered as fake")
            #text output
            self.Result.setText("IMAGE MANUALLY REFERED AS FAKE" )
            img_src = cv2.imwrite('C:\\Users\\James\\Desktop\\SeamlessCloning\\Referals\\FAKE\\TEST.jpg', DefaultImage)
            self.explanation.setText("")
            self.explanation2.setText("")
            self.Result.adjustSize()
            self.explanation.adjustSize()
            self.explanation2.adjustSize()
            self.update()

# ---------------------------------Start of Program ----------------------------------------------------------------------

    def manualInterventionClean(self, DefaultImage):
            print("This image has been refered as Clean")
            cv2.imwrite('C:\\Users\\James\\Desktop\\SeamlessCloning\\Referals\\CLEAN\\TEST.jpg', DefaultImage)
            self.Result.setText("IMAGE MANUALLY REFERED AS CLEAN" )
            self.explanation.setText("")
            self.explanation2.setText("")
            self.Result.adjustSize()
            self.explanation.adjustSize()
            self.explanation2.adjustSize()
            self.update()



if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    SeamlesslyCloningDetector = SeamlesslyCloningDetector()
    SeamlesslyCloningDetector.show()
    
    sys.exit(app.exec_())

'''

                 

'''